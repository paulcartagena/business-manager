// <auto-generated />
using BusinessManager.Models;
using BusinessManager.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessManager.Migrations
{
    [DbContext(typeof(BdEfcoreContext))]
    partial class BdEfcoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BusinessManager.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("category");
                });

            modelBuilder.Entity("BusinessManager.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("purchasePrice");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("salePrice");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<int>("UomId")
                        .HasColumnType("int")
                        .HasColumnName("uomId");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Product_categoryId");

                    b.HasIndex(new[] { "UomId" }, "IX_Product_uomId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("BusinessManager.Models.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rolId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RolId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("RolId")
                        .HasName("PRIMARY");

                    b.ToTable("rol");
                });

            modelBuilder.Entity("BusinessManager.Models.Uom", b =>
                {
                    b.Property<int>("UomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uomId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UomId"));

                    b.Property<bool>("IsWeightUnit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isWeightUnit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("UomId")
                        .HasName("PRIMARY");

                    b.ToTable("uom");
                });

            modelBuilder.Entity("BusinessManager.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rolId");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RolId" }, "IX_User_rolId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("BusinessManager.Models.Product", b =>
                {
                    b.HasOne("BusinessManager.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("BusinessManager.Models.Uom", "Uom")
                        .WithMany("Products")
                        .HasForeignKey("UomId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Uom");

                    b.Navigation("Category");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("BusinessManager.Models.User", b =>
                {
                    b.HasOne("BusinessManager.Models.Rol", "Rol")
                        .WithMany("Users")
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Rol");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("BusinessManager.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessManager.Models.Rol", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessManager.Models.Uom", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
